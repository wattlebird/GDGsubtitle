1
00:00:00,300 --> 00:00:02,670
我们到目前为止一直在为派对制作客人名单
We've been making a guest list so far for the party.

2
00:00:02,670 --> 00:00:05,660
—— 等等 这个是为生日派对准备的客人名单 是吗 凯瑟琳？
&gt;&gt; Wait, this is the guest list for the birthday party, right, Catherine?

3
00:00:05,660 --> 00:00:06,700
—— 是啊
&gt;&gt; Yeah.

4
00:00:06,700 --> 00:00:09,140
—— 我希望我也能在名单上
&gt;&gt; I really hope I'm on this list.

5
00:00:09,140 --> 00:00:11,930
—— 好吧 让我们研究一下
&gt;&gt; Well, we'll have to see about that.

6
00:00:11,930 --> 00:00:14,010
—— 哇哦 我觉得那真的很害羞(feel small)
&gt;&gt; Wow, I feel really small about that.

7
00:00:14,010 --> 00:00:15,160
—— 那么 说到小(small)
&gt;&gt; Well, speaking about small,

8
00:00:15,160 --> 00:00:18,010
我们讨论一下屏幕上View的尺寸大小
let's talk about the size of views on a screen.

9
00:00:18,010 --> 00:00:21,180
—— 哦 我们已经用了既定的高度 用dp表示的 不是吗？
&gt;&gt; Oh, we've used the fixed written height, which is the dp, right?

10
00:00:21,180 --> 00:00:23,720
—— 是的 高度和宽度都是
&gt;&gt; Yeah, the width and height.

11
00:00:23,720 --> 00:00:25,640
而且我们也可以设定View紧密包含内容(wrap_context)
And we could also set, wrap content, with view.

12
00:00:25,640 --> 00:00:28,275
—— 没错 View把自己围绕着内容包紧
&gt;&gt; Right, which is a strange way of saying that the view is going to

13
00:00:28,275 --> 00:00:29,684
实在是一种奇怪的说法
wrap itself around the content.

14
00:00:29,684 --> 00:00:30,549
应该是当内容变大
So the content grows large,

15
00:00:30,549 --> 00:00:32,880
View也会变大 内容变小 View也会变小
the view grows large, the content is small and the view grows small.

16
00:00:32,880 --> 00:00:35,300
—— 是的 然而还有第三种 叫做“匹配父元素”(match_parent)
&gt;&gt; Yeah, and there's actually a third one which is called, match parent.

17
00:00:35,300 --> 00:00:37,930
—— 听起来很奇怪
&gt;&gt; That seems a little strange.

18
00:00:37,930 --> 00:00:41,840
听起来像单身父母的约会网站
That sounds like a dating website for single parents.

19
00:00:41,840 --> 00:00:42,600
—— 并不
&gt;&gt; Not quite.

20
00:00:42,600 --> 00:00:47,370
和父元素匹配是说View的高或宽会和父元素一样
Match parent means that the view will be As wide or as tall as the parent.

21
00:00:47,370 --> 00:00:48,446
—— 哦 这样就说得通了
&gt;&gt; Oh, so that makes sense.

22
00:00:48,446 --> 00:00:51,400
我是一个View 我有一个父元素而且
I am a view, I have a parent and my width and

23
00:00:51,400 --> 00:00:53,840
我的高度和我的宽度将会和父元素保持一致
height is going to be the same as my parent.

24
00:00:53,840 --> 00:00:55,920
好 —— 准确地说
Okay. &gt;&gt; Exactly, so that's to summarize,

25
00:00:55,920 --> 00:00:59,800
为了改变View的尺寸 你可以为宽度设定不同值
the different values that you can set for a size of a view is width.

26
00:00:59,800 --> 00:01:01,090
高度和宽度可以用dp指定
Fixed dp for width and height.

27
00:01:01,090 --> 00:01:02,910
—— 没错 你也可以设定wrap_content
&gt;&gt; Correct, you can also do wrap_content.

28
00:01:02,910 --> 00:01:04,986
接下来我们将要尝试的是
And the next one we're going to try out is

29
00:01:04,986 --> 00:01:06,780
—— match_parent
&gt;&gt; match_parent.

30
00:01:06,780 --> 00:01:10,160
这里是几个线性布局中设定不同宽度
Here are some examples of how setting different widths on the child views

31
00:01:10,160 --> 00:01:13,770
最终影响到用户界面的例子
in a linear layout can affect the final user interface.

32
00:01:13,770 --> 00:01:19,070
这个例子中我们把每个子元素的View宽度设定为200dp
In this example we set each child view to have a fixed width of 200 dp.

33
00:01:19,070 --> 00:01:22,590
如果每个View里的内容大于200dp
If the content inside each view is greater than 200 DP

34
00:01:22,590 --> 00:01:26,330
你就会冒有部分内容被截断的风险
then you run risk of cutting some content off like this.

35
00:01:26,330 --> 00:01:31,600
这个例子中我们设置每个子元素的View宽度为wrap_content
In this example we set each child view to have a width a wrap content.

36
00:01:31,600 --> 00:01:33,500
现在所有的内容都被显示出来了
Now all the content content is shown, but

37
00:01:33,500 --> 00:01:38,090
但是每个View的宽度随着内容的不一致而不一致
the width of each view really varies based on what's inside each view.

38
00:01:38,090 --> 00:01:42,020
这个例子中 我们设置每个子元素的View为match_parent
In this example, we set the width of each child view to be match parent.

39
00:01:42,020 --> 00:01:46,650
现在你可以看见每个子元素的宽度和父元素的一样
Now you see that the width of each child is as wide as the parent view group.

40
00:01:46,650 --> 00:01:49,680
无关其内容
Regardless of the content inside of it.

41
00:01:49,680 --> 00:01:54,070
现在这些值也可以被应用于每个View的高度
Now those same values can also be applied for the height of each view.

42
00:01:54,070 --> 00:01:59,240
这个例子中我们把每个子元素的高度设置为200dp
In this example we set the height of this child text view to be 200 dp.

43
00:01:59,240 --> 00:02:01,570
如果内容本身高度大于200dp
If the content inside it is taller than that.

44
00:02:01,570 --> 00:02:05,400
你就有可能截断部分内容
Then you run the risk of cutting off some of the content.

45
00:02:05,400 --> 00:02:09,919
在这个例子中 我们设置每个子元素为wrap_content
In this example, we set the height of the child text view to be wrap content.

46
00:02:09,919 --> 00:02:12,040
这样 所有内容就会被显示在屏幕上
That way all the content will be displayed on screen and

47
00:02:12,040 --> 00:02:15,650
而且没有截断 因为TextView的高度决定于其
nothing will be cut off because the size of the text view is dependent

48
00:02:15,650 --> 00:02:17,940
里面的内容
on the content inside of it.

49
00:02:17,940 --> 00:02:22,790
这个例子中 我们设置每个子元素的高度为match_parent
In this example, we set the height of the child text view to be match parent.

50
00:02:22,790 --> 00:02:25,300
这样子View就会和父元素一样高
That way the child view is as tall as the parent itself,

51
00:02:25,300 --> 00:02:27,730
而无视其内部内容
regardless of the content inside it.

52
00:02:27,730 --> 00:02:29,980
我们现在打开XML可视化器
Let's open the XML visualizer now and

53
00:02:29,980 --> 00:02:32,980
试着在代码里面做这些
try to be more like our parents in the code.

54
00:02:32,980 --> 00:02:36,670
我们在下面的教师笔记中提供了XML可视化器的链接
We're providing you a link to the XML visualizer with some starter code

55
00:02:36,670 --> 00:02:39,050
还有一些初始代码
in the instructor notes below.

56
00:02:39,050 --> 00:02:41,570
在本例中 线性布局是根View
In this case, the LinearLayout is the root view

57
00:02:41,570 --> 00:02:45,580
因为他是第一个和最外面的View
of this layout because it's the first and outermost view.

58
00:02:45,580 --> 00:02:49,390
如果我们为根View的高度和宽度设置match_parent
If we set match_parent for the width and height of this root view, and

59
00:02:49,390 --> 00:02:51,870
并把这种布局设置为主要布局
we set this as the main layout of our app,

60
00:02:51,870 --> 00:02:56,840
那么这个线性布局就会和设备的高和宽一致
then this linear layout will be as tall and wide as the device screen.

61
00:02:56,840 --> 00:03:00,300
我可以通过设置这个线性布局的背景为非透明
I can show you by setting the background of this linear layout

62
00:03:00,300 --> 00:03:04,400
让你看得更清楚
to be a non-transparent color.

63
00:03:04,400 --> 00:03:07,100
如果我设置了一个灰色的背景
If I set a gray background color on this linear layout Then,

64
00:03:07,100 --> 00:03:11,660
你就会看到灰色占据了整个设备的高和宽
you can see how the gray extends the full width and height of the device.

65
00:03:11,660 --> 00:03:13,370
现在 如果我改变这些TextView的宽度和高度为match_parent
Now, what happens if I try to change the width or

66
00:03:13,370 --> 00:03:15,980
将会发生什么？
height of these text views to be match parent?

67
00:03:15,980 --> 00:03:18,450
为了搞清楚每个View的边界
To make it clear where the bounds of each view are,

68
00:03:18,450 --> 00:03:21,510
我将为每一个View设置背景颜色
I'm going to set a background color on each of the views.

69
00:03:21,510 --> 00:03:25,660
现在我把这个TextView设置为match_parent
Now I'm going to change the height of this text view to be match parent.

70
00:03:25,660 --> 00:03:28,270
顺便说一句 它的拼写是match_parent
By the way, you spell it match_parent.

71
00:03:28,270 --> 00:03:32,530
现在你可以看到这个TextView占据了父元素的全部高度
And now you see that this text view takes up the full height of the parent.

72
00:03:32,530 --> 00:03:35,550
不幸的是 它把所有其他的东西都推到了屏幕外面
Unfortunately, it pushes everything else off the screen, so

73
00:03:35,550 --> 00:03:36,580
我们不希望看到这些
we don't really want that.

74
00:03:36,580 --> 00:03:39,330
那么我们就把它换回wrap_content
So let's change it back to wrap content.

75
00:03:39,330 --> 00:03:39,950
好
Okay.

76
00:03:39,950 --> 00:03:43,750
我们把宽度改成match_parent 看看会有什么变化
So let's change the width now to be match parent and see what it does.

77
00:03:43,750 --> 00:03:48,580
现在TextView的宽度就和父元素一样了 也就是说
Now the width of the TextView is as wide as the parent, which in turn,

78
00:03:48,580 --> 00:03:51,750
和设备屏幕的宽度一样
is as wide as the device screen.

79
00:03:51,750 --> 00:03:54,940
如果我把其他TextView也换成match_parent
If I change the other TextViews to also be match_parent

80
00:03:54,940 --> 00:03:58,610
你可以看见它也开始占据了父元素的全部宽度
You can see that it also starts to take up the full width of the parent.

81
00:03:58,610 --> 00:04:01,740
我也想指出另外一件事
I also want to point out one more thing.

82
00:04:01,740 --> 00:04:04,860
每当你看见以"layout_"开头的属性名称
Every time you see an attribute that starts with layout underscore, like

83
00:04:04,860 --> 00:04:10,080
如layout_height或layout_width 这些是视图组(view group)的布局信息
layout height or layout width, these are actually view group layout parameters.

84
00:04:10,080 --> 00:04:13,480
他们也被父视图组(view group)使用以确定
These are used by the parent view group to determine the size and

85
00:04:13,480 --> 00:04:16,190
View的尺寸和位置
the position of these views.

86
00:04:16,190 --> 00:04:19,110
同时 其他属性 诸如背景 文字大小
Meanwhile, the other attributes like background, text size, and

87
00:04:19,110 --> 00:04:23,630
和文字由TextView本身处理以自定义它的风格
text are handled by the TextView in terms of styling its own view.

88
00:04:23,630 --> 00:04:27,360
但是这些视图组(view group)的布局参数由其父元素处理
But these view group layout parameters are handled by the parent.

89
00:04:27,360 --> 00:04:30,460
现在 该由你来试试不同的宽度和高度值了
Now it's your turn to try different width and height values.

90
00:04:30,460 --> 00:04:33,890
下面的教师笔记
For the link to the XML visualizer with some starter code,

91
00:04:33,890 --> 00:04:35,820
有配备初始代码的XML可视化器
see the instructor notes below.

92
00:04:35,820 --> 00:04:38,970
试着去改变每个TextView的宽度和高度
Try to change the width and height values of each TextView.

93
00:04:38,970 --> 00:04:43,270
你可以设置一个既定的dp值 或warp_content match_parent
You can set a fixed dp value, wrap-content, or match_parent.

94
00:04:43,270 --> 00:04:46,730
记住 每个View的宽度和高度不一定要一致
Remember that for each view, the width and height values don't have to match.

95
00:04:46,730 --> 00:04:46,735
当你完成之时 点选这个方框以继续
When you're done, check this box to continue.
